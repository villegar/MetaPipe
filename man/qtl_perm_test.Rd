% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metapipe.R
\name{qtl_perm_test}
\alias{qtl_perm_test}
\title{QTL mapping permutation test}
\usage{
qtl_perm_test(
  x_data,
  cpus = 1,
  qtl_method = "par-scanone",
  raw_data_normalised = NULL,
  lod_threshold = 3,
  parametric = TRUE,
  n_perm = 1000,
  plots_dir = getwd(),
  ...
)
}
\arguments{
\item{x_data}{Cross-data frame containing genetic map data and traits.}

\item{cpus}{Number of CPUs to be used in the computation.}

\item{qtl_method}{QTL mapping method.}

\item{raw_data_normalised}{Normalised raw data, see 
\code{\link{assess_normality}}.}

\item{lod_threshold}{LOD score threshold to look up for significant QTLs}

\item{parametric}{Boolean flag to indicate whether or not \code{x_data} 
contains parametric (normal) traits.}

\item{n_perm}{Number of permutations.}

\item{plots_dir}{Output directory for plots.}

\item{...}{
  Arguments passed on to \code{\link[qtl:scanone]{qtl::scanone}}
  \describe{
    \item{\code{chr}}{Optional vector indicating the chromosomes for which LOD
   scores should be calculated.  This should be a vector of character
   strings referring to chromosomes by name; numeric values are
   converted to strings.  Refer to chromosomes with a preceding \code{-}
   to have all chromosomes but those considered.  A logical (TRUE/FALSE)
   vector may also be used.}
    \item{\code{model}}{The phenotype model: the usual normal model, a model for
   binary traits, a two-part model or non-parametric analysis}
    \item{\code{method}}{Indicates whether to use the EM algorithm,
   imputation, Haley-Knott regression, the extended Haley-Knott method,
   or marker regression.  Not all methods are available for all models.
   Marker regression is performed either by dropping individuals with
   missing genotypes (\code{"mr"}), or by first filling in missing data
   using a single imputation (\code{"mr-imp"}) or by the Viterbi
   algorithm (\code{"mr-argmax"}).}
    \item{\code{addcovar}}{Additive covariates;
   allowed only for the normal and binary models.}
    \item{\code{intcovar}}{Interactive covariates (interact with QTL genotype);
   allowed only for the normal and binary models.}
    \item{\code{weights}}{Optional weights of individuals.  Should be either NULL
   or a vector of length n.ind containing positive weights.  Used only
   in the case \code{model="normal"}.}
    \item{\code{use}}{In the case that multiple phenotypes are selected to be
   scanned, this argument indicates whether to use all individuals,
   including those missing some phenotypes, or just those individuals
   that have data on all selected phenotypes.}
    \item{\code{upper}}{Used only for the two-part model; if true, the
   "undefined" phenotype is the maximum observed phenotype; otherwise,
   it is the smallest observed phenotype.}
    \item{\code{ties.random}}{Used only for the non-parametric "model"; if TRUE,
   ties in the phenotypes are ranked at random.  If FALSE, average ranks
   are used and a corrected LOD score is calculated.}
    \item{\code{start}}{Used only for the EM algorithm with the normal model and
   no covariates.  If \code{NULL}, use the usual starting values; if
   length 1, use random initial weights for EM; otherwise, this should
   be a vector of length n+1 (where n is the number of possible
   genotypes for the cross), giving the initial values for EM.}
    \item{\code{maxit}}{Maximum number of iterations for methods \code{"em"} and
   \code{"ehk"}.}
    \item{\code{tol}}{Tolerance value for determining convergence for methods
   \code{"em"} and \code{"ehk"}.}
    \item{\code{perm.Xsp}}{If \code{n.perm} > 0, so that a permutation test will
   be performed, this indicates whether separate permutations should be
   performed for the autosomes and the X chromosome, in order to get an
   X-chromosome-specific LOD threshold.  In this case, additional
   permutations are performed for the X chromosome.}
    \item{\code{perm.strata}}{If \code{n.perm} > 0, this may be used to perform a
   stratified permutation test.  This should be a vector with the same
   number of individuals as in the cross data.  Unique values indicate
   the individual strata, and permutations will be performed within the
   strata.}
    \item{\code{verbose}}{In the case \code{n.perm} is specified, display
   information about the progress of the permutation tests.}
    \item{\code{batchsize}}{The number of phenotypes (or permutations) to be run
   as a batch; used only for methods \code{"hk"} and \code{"imp"}.}
    \item{\code{n.cluster}}{If the package \code{snow} is available and
   \code{n.perm} > 0, permutations are run in parallel using this number
   of nodes.}
    \item{\code{ind.noqtl}}{Indicates individuals who should not be allowed a QTL
   effect (used rarely, if at all); this is a logical vector of same
   length as there are individuals in the cross.}
  }}
}
\value{
Data frame containing the significant QTLs information.
}
\description{
Perform a QTL mapping permutation test using the 
\code{\link[qtl:scanone]{qtl:scanone(...)}} function to find significant QTL.
}
\examples{
# Create temp dir
tmp <- tempdir()
dir.create(tmp, showWarnings = FALSE, recursive = TRUE)

# Toy dataset
excluded_columns <- c(1, 2)
population <- 5
seed <- 123
set.seed(seed)
example_data <- data.frame(ID = 1:population,
                           P1 = c("one", "two", "three", "four", "five"),
                           T1 = rnorm(population),
                           T2 = rnorm(population))

output <- MetaPipe::assess_normality(example_data, 
                                     excluded_columns, 
                                     show_stats = FALSE,
                                     out_prefix = paste0(tmp, "/tmp"))

# Create and store random genetic map (for testing only)
genetic_map <- MetaPipe:::random_map(population = population, 
                                     seed = seed)

\donttest{
# Load cross file with genetic map and raw data for normal traits
x <- MetaPipe::read.cross(genetic_map, output$norm)

x <- qtl::calc.genoprob(x, step = 1, error.prob = 0.001)
x_scone <- MetaPipe::qtl_scone(x, 1, model = "normal", method = "hk")
x_qtl_perm <- MetaPipe::qtl_perm_test(x, 
                                      n_perm = 5, 
                                      model = "normal", 
                                      method = "hk",
                                      plots_dir = tmp)
x_qtl_perm_1000 <- MetaPipe::qtl_perm_test(x, 
                                           n_perm = 1000, 
                                           model = "normal", 
                                           method = "hk",
                                           plots_dir = tmp)
}

# F1 Seedling Ionomics dataset
data(ionomics) # Includes some missing data
data(father_riparia) # Genetic map
ionomics_rev <- MetaPipe::replace_missing(ionomics, 
                                          excluded_columns = c(1, 2),
                                          replace_na =  TRUE,
                                          out_prefix = paste0(tmp, "/tmp"))
\donttest{
ionomics_normalised <- 
  MetaPipe::assess_normality(ionomics_rev,
                             excluded_columns = c(1, 2),
                             out_prefix = file.path(tmp, "ionomics"),
                             transf_vals = c(2, exp(1)),
                             show_stats = FALSE)

# Load cross file with genetic map and raw data for normal traits
x <- MetaPipe::read.cross(father_riparia, 
                          ionomics_normalised$norm,
                          genotypes = c("nn", "np", "--"))
                          
set.seed(seed)
x <- qtl::jittermap(x)
x <- qtl::calc.genoprob(x, step = 1, error.prob = 0.001)

x_scone <- MetaPipe::qtl_scone(x, 1, model = "normal", method = "hk")
x_qtl_perm <- MetaPipe::qtl_perm_test(x, 
                                      n_perm = 5, 
                                      model = "normal", 
                                      method = "hk",
                                      plots_dir = tmp)
x_qtl_perm_1000 <- MetaPipe::qtl_perm_test(x, 
                                           n_perm = 1000, 
                                           model = "normal", 
                                           method = "hk",
                                           plots_dir = tmp)
}
# Clean temporal directory
unlink(tmp, recursive = TRUE, force = TRUE)

}
\seealso{
Other QTL mapping functions: 
\code{\link{qtl_scone}()},
\code{\link{read.cross}()}
}
\concept{QTL mapping functions}
