% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-assess-normality.R
\name{assess_normality_postprocessing}
\alias{assess_normality_postprocessing}
\title{Post-processing for \code{\link{assess_normality_core}}}
\usage{
assess_normality_postprocessing(
  raw_data,
  excluded_columns,
  raw_data_normalised,
  out_prefix = "metapipe",
  pareto_scaling = FALSE
)
}
\arguments{
\item{raw_data}{Data frame containing the raw data.}

\item{excluded_columns}{Numeric vector containing the indices of the dataset 
properties that are non-numeric, excluded columns.}

\item{raw_data_normalised}{Data frame containing the normalised raw data, 
created with \code{\link{assess_normality_core}}.}

\item{out_prefix}{Prefix for output files and plots.}

\item{pareto_scaling}{Boolean flag to indicate whether or not perform a 
Pareto scaling on the normalised data.}
}
\value{
List of data frames for the normal (\code{norm}) and skewed 
(\code{skew}) traits.
}
\description{
Post-processing for the normality assessment of the traits.
}
\details{
It creates four CSV files containing the following data:
\itemize{
  \item \code{paste0(out_prefix, "_raw_data_normalised_all.csv")}: 
  data frame in long format created with the \code{\link{assess_normality_core}}
  function. Contains all the traits, including name, values, and 
  transformation (if applicable).
  \item \code{paste0(out_prefix, "_raw_data_norm.csv")}: data frame in wide
  format containing traits with a normal distribution.
  \item \code{paste0(out_prefix, "_raw_data_non_par.csv")}: data frame in 
  wide format containing traits \emph{without} a normal distribution.
  \item \code{paste0(out_prefix, "_normalisation_stats.csv")}: data frame
  containing details of the \code{\link{assess_normality_core}} process, like 
  the total number of traits transformed and normalisations performed.
}
}
\examples{
\donttest{
# Toy dataset
example_data <- data.frame(ID = c(1,2,3,4,5), 
                           P1 = c("one", "two", "three", "four", "five"), 
                           T1 = rnorm(5), 
                           T2 = rnorm(5))
example_data_normalised <- MetaPipe:::assess_normality_core(example_data, 
                                                            c(1, 2))
example_data_normalised_post <- 
 MetaPipe:::assess_normality_postprocessing(example_data, 
                                            c(1, 2), 
                                            example_data_normalised)
example_data_norm <- example_data_normalised_post$norm
example_data_skew <- example_data_normalised_post$skew
# Normal traits
knitr::kable(example_data_norm)

# Skewed traits (empty)
# knitr::kable(example_data_skew)


# F1 Seedling Ionomics dataset
data(ionomics) # Includes some missing data
ionomics_rev <- MetaPipe::replace_missing(ionomics, 
                                          excluded_columns = c(1, 2),
                                          replace_na =  TRUE)
ionomics_normalised <- 
  MetaPipe:::assess_normality_core(ionomics_rev,
                                   excluded_columns = c(1, 2),
                                   out_prefix = "ionomics",
                                   transf_vals = c(2, exp(1)))
ionomics_normalised_post <- 
  MetaPipe:::assess_normality_postprocessing(ionomics_rev, 
                                             c(1, 2), 
                                             ionomics_normalised,
                                             out_prefix = "ionomics")
ionomics_norm <- ionomics_normalised_post$norm
ionomics_skew <- ionomics_normalised_post$skew
# Normal traits
knitr::kable(ionomics_norm[1:5, ])

# Skewed traits (partial output)
knitr::kable(ionomics_skew[1:5, 1:10])
}

# Clean up example outputs
MetaPipe:::tidy_up(c("HIST_", "ionomics_", "metapipe_"))

}
\seealso{
\code{\link{assess_normality_core}} and 
\code{\link{assess_normality_stats}}
}
\keyword{internal}
